AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  AccessLogStack:
    Description: 'Optional stack name of s3 stack to store access logs.'
    Type: String
    Default: ''
  WAFStack:
    Description: 'Optional stack name of WAF stack.'
    Type: String
    Default: ''
  DomainName:
    Description: 'Optional domain.'
    Type: String
    Default: ''
  SubDomainNameWithDot:
    Description: 'Primary name that is used to create the DNS entry with trailing dot. Leave blank for naked (or apex and bare) domain.'
    Type: String
    Default: ''
  RedirectSubDomainNameWithDot:
    Description: 'Optional sub domain name redirecting to DomainName (e.g. www.).'
    Type: String
    Default: ''
  DefaultRootObject:
    Description: 'Optional name of the index document for the website (e.g., index.html).'
    Type: String
    Default: 'index.html'
  DefaultErrorObject:
    Description: 'Optional name of the error document for the website (e.g. error.html).'
    Type: String
    Default: ''
  DefaultErrorResponseCode:
    Description: 'The HTTP status code that you want to return along with the error page (requires DefaultErrorObject).'
    Type: String
    Default: '404'
    AllowedValues: ['200', '404']
  ContentSecurityPolicy:
    Description: 'Optional content-security-policy to be served with the site. Defaults to HTTPS only.'
    Type: String
    Default: 'default-src https:; script-src https:; style-src https:'
  ExistingCertificate:
    Description: 'Optional ACM Certificate ARN.'
    Type: String
    Default: ''
  IncludeCloudFrontAlias:
    Description: 'Whether to include the domain as an alias for the CloudFront distribution. If an existing distribution already has the Alias, we need to delete it first.'
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Conditions:
  HasDomain: !Not [!Equals [!Ref DomainName, '']]
  NoDomain: !Not [Condition: HasDomain]
  HasRedirectDomainName: !Not [!Equals [!Ref RedirectSubDomainNameWithDot, '']]
  HasBucket: !Not [!Equals [!Ref AccessLogStack, '']]
  HasWAF: !Not [!Equals [!Ref WAFStack, '']]
  HasDefaultRootObject: !Not [!Equals [!Ref DefaultRootObject, '']]
  HasDefaultErrorObject: !Not [!Equals [!Ref DefaultErrorObject, '']]
  HasExistingCertificate: !Not [!Equals [!Ref ExistingCertificate, '']]
  ShouldIncludeCloudFrontAlias: !Equals [!Ref IncludeCloudFrontAlias, 'true']

Resources:
  Bucket:
    Type: 'AWS::S3::Bucket'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      AccelerateConfiguration:
        AccelerationStatus: Enabled
      WebsiteConfiguration:
        !If [
          NoDomain,
          {
            IndexDocument: !If [HasDefaultRootObject, !Ref DefaultRootObject, !Ref 'AWS::NoValue'],
            ErrorDocument:
              !If [HasDefaultErrorObject, !Ref DefaultErrorObject, !Ref 'AWS::NoValue'],
          },
          !Ref 'AWS::NoValue',
        ]
  BucketPolicyPublic:
    Condition: NoDomain
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${Bucket}/*'
            Principal: '*'
  BucketPolicy:
    Condition: HasDomain
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${Bucket}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          - Sid: AllowSSLRequestsOnly # AWS Foundational Security Best Practices v1.0.0 S3.5
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt 'Bucket.Arn'
              - !Sub '${Bucket.Arn}/*'
            Condition:
              Bool:
                'aws:SecureTransport': false
  ViewerRequestRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
            Action: 'sts:AssumeRole'
  ViewerRequestLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !GetAtt 'ViewerRequestLogGroup.Arn'
      PolicyName: lambda
      Roles:
        - !Ref ViewerRequestRole
  ViewerRequestLambdaEdgePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 'logs:CreateLogGroup'
            Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/us-east-1.${ViewerRequestFunction}:log-stream:'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/us-east-1.${ViewerRequestFunction}:log-stream:*'
      PolicyName: 'lambda-edge'
      Roles:
        - !Ref ViewerRequestRole
  ViewerRequestFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          const regex = /\.[A-Za-z0-9]+$/;
          const indexDocument = '${DefaultRootObject}';
          const domainName = '${DomainName}'.toLowerCase();
          const redirectSubDomainNameWithDot = '${RedirectSubDomainNameWithDot}'.toLowerCase();
          const redirectDomainName = redirectSubDomainNameWithDot ? `${!redirectSubDomainNameWithDot}${!domainName}` : '';

          exports.handler = async function(event) {
            const cf = event.Records[0].cf;
            if (cf.request.headers.host[0].value.toLowerCase() === redirectDomainName) {
              return {
                status: '301',
                statusDescription: 'Moved Permanently',
                headers: {
                  location: [{
                    key: 'Location',
                    value: `https://${!domainName}${!cf.request.uri}`,
                  }],
                }
              };
            }
            if (cf.request.uri.endsWith('/')) {
              return Object.assign({}, cf.request, {uri: `${!cf.request.uri}${!indexDocument}`});
            }
            if (cf.request.uri.endsWith(`/${!indexDocument}`)) {
              return {
                status: '302',
                statusDescription: 'Found',
                headers: {
                  location: [{
                    key: 'Location',
                    value: cf.request.uri.substr(0, cf.request.uri.length - indexDocument.length),
                  }],
                }
              };
            }
            if (!regex.test(cf.request.uri)) {
              return {
                status: '302',
                statusDescription: 'Found',
                headers: {
                  location: [{
                    key: 'Location',
                    value: `${!cf.request.uri}/`,
                  }],
                }
              };
            }

            return cf.request;
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'ViewerRequestRole.Arn'
      Runtime: 'nodejs12.x'
      Timeout: 5
  ViewerRequestVersionV4:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref ViewerRequestFunction
  ViewerRequestLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ViewerRequestFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  OriginResponseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
            Action: 'sts:AssumeRole'
  OriginResponseLambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !GetAtt 'OriginResponseLogGroup.Arn'
      PolicyName: lambda
      Roles:
        - !Ref OriginResponseRole
  OriginResponseLambdaEdgePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 'logs:CreateLogGroup'
            Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/us-east-1.${OriginResponseFunction}:log-stream:'
          - Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/us-east-1.${OriginResponseFunction}:log-stream:*'
      PolicyName: 'lambda-edge'
      Roles:
        - !Ref OriginResponseRole
  OriginResponseFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          exports.handler = (event, context, callback) => {
            const response = event.Records[0].cf.response;
            const headers = response.headers;

            headers['strict-transport-security'] = [{key: 'Strict-Transport-Security', value: 'max-age=63072000; includeSubdomains; preload'}];
            headers['content-security-policy'] = [{key: 'Content-Security-Policy', value: "${ContentSecurityPolicy}"}];
            headers['x-content-type-options'] = [{key: 'X-Content-Type-Options', value: 'nosniff'}];
            headers['x-frame-options'] = [{key: 'X-Frame-Options', value: 'DENY'}];
            headers['x-xss-protection'] = [{key: 'X-XSS-Protection', value: '1; mode=block'}];
            headers['referrer-policy'] = [{key: 'Referrer-Policy', value: 'same-origin'}];

            callback(null, response);
          };
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'OriginResponseRole.Arn'
      Runtime: 'nodejs12.x'
      Timeout: 5
  OriginResponseVersionV4:
    Type: 'AWS::Lambda::Version'
    Properties:
      FunctionName: !Ref OriginResponseFunction
  OriginResponseLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OriginResponseFunction}'
      RetentionInDays: !Ref LogsRetentionInDays
  CloudFrontOriginAccessIdentity:
    Condition: HasDomain
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub
          - '${SubDomainNameWithDot}${DomainName}'
          - SubDomainNameWithDot: !Ref SubDomainNameWithDot
            DomainName: !Ref DomainName
  CloudFrontDistribution:
    Condition: HasDomain
    Type: 'AWS::CloudFront::Distribution'
    DependsOn:
      - ViewerRequestRole
      - ViewerRequestLambdaPolicy
      - ViewerRequestLambdaEdgePolicy
      - OriginResponseRole
      - OriginResponseLambdaPolicy
      - OriginResponseLambdaEdgePolicy
    Properties:
      DistributionConfig:
        Aliases: !If
          - ShouldIncludeCloudFrontAlias
          - !If
            - HasRedirectDomainName
            - - !Sub
                - '${SubDomainNameWithDot}${DomainName}'
                - SubDomainNameWithDot: !Ref SubDomainNameWithDot
                  DomainName: !Ref DomainName
              - !Sub
                - '${RedirectSubDomainNameWithDot}${DomainName}'
                - RedirectSubDomainNameWithDot: !Ref RedirectSubDomainNameWithDot
                  DomainName: !Ref DomainName
            - - !Sub
                - '${SubDomainNameWithDot}${DomainName}'
                - SubDomainNameWithDot: !Ref SubDomainNameWithDot
                  DomainName: !Ref DomainName
          - !Ref 'AWS::NoValue'
        Comment: Created by Ness
        CustomErrorResponses: !If
          - HasDefaultErrorObject
          - - ErrorCode: 403 # 403 from S3 indicates that the file does not exists
              ResponseCode: !Ref DefaultErrorResponseCode
              ResponsePagePath: !Sub
                - '/${DefaultErrorObject}'
                - DefaultErrorObject: !Ref DefaultErrorObject
          - []
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: 'viewer-request'
              LambdaFunctionARN: !Ref ViewerRequestVersionV4
            - EventType: 'origin-response'
              LambdaFunctionARN: !Ref OriginResponseVersionV4
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: 'redirect-to-https'
        DefaultRootObject: !If [HasDefaultRootObject, !Ref DefaultRootObject, !Ref 'AWS::NoValue']
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          !If [
            HasBucket,
            {
              Bucket: {'Fn::ImportValue': !Sub '${AccessLogStack}-BucketDomainName'},
              Prefix: !Ref 'AWS::StackName',
            },
            !Ref 'AWS::NoValue',
          ]
        Origins:
          - DomainName: !GetAtt 'Bucket.RegionalDomainName'
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_All'
        ViewerCertificate:
          !If [
            HasExistingCertificate,
            {
              AcmCertificateArn: !Ref ExistingCertificate,
              MinimumProtocolVersion: 'TLSv1.1_2016',
              SslSupportMethod: 'sni-only',
            },
            !Ref 'AWS::NoValue',
          ]
        WebACLId: !If
          - HasWAF
          - {'Fn::ImportValue': !Sub '${WAFStack}-WebACL'}
          - !Ref 'AWS::NoValue'

Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  BucketName:
    Description: 'Name of the S3 bucket storing the static files.'
    Value: !Ref Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  URL:
    Description: 'URL to static website.'
    Value: !If
      - HasDomain
      - !Sub
        - 'https://${SubDomainNameWithDot}${DomainName}'
        - SubDomainNameWithDot: !Ref SubDomainNameWithDot
          DomainName: !Ref DomainName
      - !GetAtt 'Bucket.WebsiteURL'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
  DistributionId:
    Condition: HasDomain
    Description: 'CloudFront distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'
  DistributionDomainName:
    Condition: HasDomain
    Description: 'CloudFront distribution domain name'
    Value: !GetAtt 'CloudFrontDistribution.DomainName'
    Export:
      Name: !Sub '${AWS::StackName}-DistributionDomainName'
